// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FlightCompanyProtocolv3.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from FlightCompanyProtocolv3.proto</summary>
  public static partial class FlightCompanyProtocolv3Reflection {

    #region Descriptor
    /// <summary>File descriptor for FlightCompanyProtocolv3.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FlightCompanyProtocolv3Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1GbGlnaHRDb21wYW55UHJvdG9jb2x2My5wcm90bxIIcHJvdG9jb2wiKgoE",
            "VXNlchIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSKTAQoG",
            "RmxpZ2h0EhMKC2Rlc3RpbmF0aW9uGAEgASgJEhUKDWRlcGFydHVyZURhdGUY",
            "AiABKAkSFQoNZGVwYXJ0dXJlVGltZRgDIAEoCRIPCgdhaXJwb3J0GAQgASgJ",
            "EhUKDW51bWJlck9mU2VhdHMYBSABKAkSHgoWbnVtYmVyT2ZTZWF0c0F2YWls",
            "YWJsZRgGIAEoCSJyCgZUaWNrZXQSEgoKY2xpZW50TmFtZRgBIAEoCRIUCgx0",
            "b3VyaXN0c05hbWUYAiABKAkSFQoNY2xpZW50QWRkcmVzcxgDIAEoCRIVCg1u",
            "dW1iZXJPZlNlYXRzGAQgASgJEhAKCGlkRmxpZ2h0GAUgASgJIoUCChRGbGln",
            "aHRDb21wYW55UmVxdWVzdBIxCgR0eXBlGAEgASgOMiMucHJvdG9jb2wuRmxp",
            "Z2h0Q29tcGFueVJlcXVlc3QuVHlwZRIeCgR1c2VyGAIgASgLMg4ucHJvdG9j",
            "b2wuVXNlckgAEiIKBmZsaWdodBgDIAEoCzIQLnByb3RvY29sLkZsaWdodEgA",
            "EiIKBnRpY2tldBgEIAEoCzIQLnByb3RvY29sLlRpY2tldEgAIkcKBFR5cGUS",
            "CwoHVW5rbm93bhAAEg0KCUxPR0dFRF9JThABEg4KCkxPR0dFRF9PVVQQAhIK",
            "CgZTRUFSQ0gQAxIHCgNCVVkQBEIJCgdwYXlsb2FkIpICChVGbGlnaHRDb21w",
            "YW55UmVzcG9uc2USMgoEdHlwZRgBIAEoDjIkLnByb3RvY29sLkZsaWdodENv",
            "bXBhbnlSZXNwb25zZS5UeXBlEh4KBHVzZXIYAiABKAsyDi5wcm90b2NvbC5V",
            "c2VySAASIgoGZmxpZ2h0GAMgASgLMhAucHJvdG9jb2wuRmxpZ2h0SAASIgoG",
            "dGlja2V0GAQgASgLMhAucHJvdG9jb2wuVGlja2V0SAAiUgoEVHlwZRILCgdV",
            "bmtub3duEAASBgoCT0sQARIJCgVFUlJPUhACEgkKBUxPR0lOEAMSCgoGTE9H",
            "T1VUEAQSCgoGU0VBUkNIEAUSBwoDQlVZEAZCCQoHcGF5bG9hZEImChluZXR3",
            "b3JrLnByb3RvYnVmZnByb3RvY29sQglQcm90b2J1ZnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.User), global::Protocol.User.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Flight), global::Protocol.Flight.Parser, new[]{ "Destination", "DepartureDate", "DepartureTime", "Airport", "NumberOfSeats", "NumberOfSeatsAvailable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Ticket), global::Protocol.Ticket.Parser, new[]{ "ClientName", "TouristsName", "ClientAddress", "NumberOfSeats", "IdFlight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.FlightCompanyRequest), global::Protocol.FlightCompanyRequest.Parser, new[]{ "Type", "User", "Flight", "Ticket" }, new[]{ "Payload" }, new[]{ typeof(global::Protocol.FlightCompanyRequest.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.FlightCompanyResponse), global::Protocol.FlightCompanyResponse.Parser, new[]{ "Type", "User", "Flight", "Ticket" }, new[]{ "Payload" }, new[]{ typeof(global::Protocol.FlightCompanyResponse.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.FlightCompanyProtocolv3Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Flight : pb::IMessage<Flight>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Flight> _parser = new pb::MessageParser<Flight>(() => new Flight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.FlightCompanyProtocolv3Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flight(Flight other) : this() {
      destination_ = other.destination_;
      departureDate_ = other.departureDate_;
      departureTime_ = other.departureTime_;
      airport_ = other.airport_;
      numberOfSeats_ = other.numberOfSeats_;
      numberOfSeatsAvailable_ = other.numberOfSeatsAvailable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flight Clone() {
      return new Flight(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private string destination_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureDate" field.</summary>
    public const int DepartureDateFieldNumber = 2;
    private string departureDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DepartureDate {
      get { return departureDate_; }
      set {
        departureDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureTime" field.</summary>
    public const int DepartureTimeFieldNumber = 3;
    private string departureTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DepartureTime {
      get { return departureTime_; }
      set {
        departureTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airport" field.</summary>
    public const int AirportFieldNumber = 4;
    private string airport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Airport {
      get { return airport_; }
      set {
        airport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfSeats" field.</summary>
    public const int NumberOfSeatsFieldNumber = 5;
    private string numberOfSeats_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumberOfSeats {
      get { return numberOfSeats_; }
      set {
        numberOfSeats_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfSeatsAvailable" field.</summary>
    public const int NumberOfSeatsAvailableFieldNumber = 6;
    private string numberOfSeatsAvailable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumberOfSeatsAvailable {
      get { return numberOfSeatsAvailable_; }
      set {
        numberOfSeatsAvailable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (DepartureDate != other.DepartureDate) return false;
      if (DepartureTime != other.DepartureTime) return false;
      if (Airport != other.Airport) return false;
      if (NumberOfSeats != other.NumberOfSeats) return false;
      if (NumberOfSeatsAvailable != other.NumberOfSeatsAvailable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destination.Length != 0) hash ^= Destination.GetHashCode();
      if (DepartureDate.Length != 0) hash ^= DepartureDate.GetHashCode();
      if (DepartureTime.Length != 0) hash ^= DepartureTime.GetHashCode();
      if (Airport.Length != 0) hash ^= Airport.GetHashCode();
      if (NumberOfSeats.Length != 0) hash ^= NumberOfSeats.GetHashCode();
      if (NumberOfSeatsAvailable.Length != 0) hash ^= NumberOfSeatsAvailable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (DepartureDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DepartureDate);
      }
      if (DepartureTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DepartureTime);
      }
      if (Airport.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Airport);
      }
      if (NumberOfSeats.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NumberOfSeats);
      }
      if (NumberOfSeatsAvailable.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NumberOfSeatsAvailable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (DepartureDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DepartureDate);
      }
      if (DepartureTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DepartureTime);
      }
      if (Airport.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Airport);
      }
      if (NumberOfSeats.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NumberOfSeats);
      }
      if (NumberOfSeatsAvailable.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NumberOfSeatsAvailable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destination.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (DepartureDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartureDate);
      }
      if (DepartureTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartureTime);
      }
      if (Airport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Airport);
      }
      if (NumberOfSeats.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NumberOfSeats);
      }
      if (NumberOfSeatsAvailable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NumberOfSeatsAvailable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flight other) {
      if (other == null) {
        return;
      }
      if (other.Destination.Length != 0) {
        Destination = other.Destination;
      }
      if (other.DepartureDate.Length != 0) {
        DepartureDate = other.DepartureDate;
      }
      if (other.DepartureTime.Length != 0) {
        DepartureTime = other.DepartureTime;
      }
      if (other.Airport.Length != 0) {
        Airport = other.Airport;
      }
      if (other.NumberOfSeats.Length != 0) {
        NumberOfSeats = other.NumberOfSeats;
      }
      if (other.NumberOfSeatsAvailable.Length != 0) {
        NumberOfSeatsAvailable = other.NumberOfSeatsAvailable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            DepartureDate = input.ReadString();
            break;
          }
          case 26: {
            DepartureTime = input.ReadString();
            break;
          }
          case 34: {
            Airport = input.ReadString();
            break;
          }
          case 42: {
            NumberOfSeats = input.ReadString();
            break;
          }
          case 50: {
            NumberOfSeatsAvailable = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            DepartureDate = input.ReadString();
            break;
          }
          case 26: {
            DepartureTime = input.ReadString();
            break;
          }
          case 34: {
            Airport = input.ReadString();
            break;
          }
          case 42: {
            NumberOfSeats = input.ReadString();
            break;
          }
          case 50: {
            NumberOfSeatsAvailable = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Ticket : pb::IMessage<Ticket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.FlightCompanyProtocolv3Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      clientName_ = other.clientName_;
      touristsName_ = other.touristsName_;
      clientAddress_ = other.clientAddress_;
      numberOfSeats_ = other.numberOfSeats_;
      idFlight_ = other.idFlight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "clientName" field.</summary>
    public const int ClientNameFieldNumber = 1;
    private string clientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "touristsName" field.</summary>
    public const int TouristsNameFieldNumber = 2;
    private string touristsName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TouristsName {
      get { return touristsName_; }
      set {
        touristsName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientAddress" field.</summary>
    public const int ClientAddressFieldNumber = 3;
    private string clientAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientAddress {
      get { return clientAddress_; }
      set {
        clientAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numberOfSeats" field.</summary>
    public const int NumberOfSeatsFieldNumber = 4;
    private string numberOfSeats_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NumberOfSeats {
      get { return numberOfSeats_; }
      set {
        numberOfSeats_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idFlight" field.</summary>
    public const int IdFlightFieldNumber = 5;
    private string idFlight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdFlight {
      get { return idFlight_; }
      set {
        idFlight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientName != other.ClientName) return false;
      if (TouristsName != other.TouristsName) return false;
      if (ClientAddress != other.ClientAddress) return false;
      if (NumberOfSeats != other.NumberOfSeats) return false;
      if (IdFlight != other.IdFlight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (TouristsName.Length != 0) hash ^= TouristsName.GetHashCode();
      if (ClientAddress.Length != 0) hash ^= ClientAddress.GetHashCode();
      if (NumberOfSeats.Length != 0) hash ^= NumberOfSeats.GetHashCode();
      if (IdFlight.Length != 0) hash ^= IdFlight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientName);
      }
      if (TouristsName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TouristsName);
      }
      if (ClientAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientAddress);
      }
      if (NumberOfSeats.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NumberOfSeats);
      }
      if (IdFlight.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IdFlight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientName);
      }
      if (TouristsName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TouristsName);
      }
      if (ClientAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientAddress);
      }
      if (NumberOfSeats.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NumberOfSeats);
      }
      if (IdFlight.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IdFlight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientName);
      }
      if (TouristsName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TouristsName);
      }
      if (ClientAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientAddress);
      }
      if (NumberOfSeats.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NumberOfSeats);
      }
      if (IdFlight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdFlight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      if (other.TouristsName.Length != 0) {
        TouristsName = other.TouristsName;
      }
      if (other.ClientAddress.Length != 0) {
        ClientAddress = other.ClientAddress;
      }
      if (other.NumberOfSeats.Length != 0) {
        NumberOfSeats = other.NumberOfSeats;
      }
      if (other.IdFlight.Length != 0) {
        IdFlight = other.IdFlight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientName = input.ReadString();
            break;
          }
          case 18: {
            TouristsName = input.ReadString();
            break;
          }
          case 26: {
            ClientAddress = input.ReadString();
            break;
          }
          case 34: {
            NumberOfSeats = input.ReadString();
            break;
          }
          case 42: {
            IdFlight = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientName = input.ReadString();
            break;
          }
          case 18: {
            TouristsName = input.ReadString();
            break;
          }
          case 26: {
            ClientAddress = input.ReadString();
            break;
          }
          case 34: {
            NumberOfSeats = input.ReadString();
            break;
          }
          case 42: {
            IdFlight = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlightCompanyRequest : pb::IMessage<FlightCompanyRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlightCompanyRequest> _parser = new pb::MessageParser<FlightCompanyRequest>(() => new FlightCompanyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlightCompanyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.FlightCompanyProtocolv3Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightCompanyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightCompanyRequest(FlightCompanyRequest other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User.Clone();
          break;
        case PayloadOneofCase.Flight:
          Flight = other.Flight.Clone();
          break;
        case PayloadOneofCase.Ticket:
          Ticket = other.Ticket.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightCompanyRequest Clone() {
      return new FlightCompanyRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.FlightCompanyRequest.Types.Type type_ = global::Protocol.FlightCompanyRequest.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FlightCompanyRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.User User {
      get { return payloadCase_ == PayloadOneofCase.User ? (global::Protocol.User) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
      }
    }

    /// <summary>Field number for the "flight" field.</summary>
    public const int FlightFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Flight Flight {
      get { return payloadCase_ == PayloadOneofCase.Flight ? (global::Protocol.Flight) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Flight;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Ticket Ticket {
      get { return payloadCase_ == PayloadOneofCase.Ticket ? (global::Protocol.Ticket) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Ticket;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      User = 2,
      Flight = 3,
      Ticket = 4,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlightCompanyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlightCompanyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Flight, other.Flight)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Protocol.FlightCompanyRequest.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Flight) hash ^= Flight.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Ticket) hash ^= Ticket.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Protocol.FlightCompanyRequest.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Flight) {
        output.WriteRawTag(26);
        output.WriteMessage(Flight);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        output.WriteRawTag(34);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Protocol.FlightCompanyRequest.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Flight) {
        output.WriteRawTag(26);
        output.WriteMessage(Flight);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        output.WriteRawTag(34);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Protocol.FlightCompanyRequest.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Flight) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flight);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlightCompanyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Protocol.FlightCompanyRequest.Types.Type.Unknown) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          if (User == null) {
            User = new global::Protocol.User();
          }
          User.MergeFrom(other.User);
          break;
        case PayloadOneofCase.Flight:
          if (Flight == null) {
            Flight = new global::Protocol.Flight();
          }
          Flight.MergeFrom(other.Flight);
          break;
        case PayloadOneofCase.Ticket:
          if (Ticket == null) {
            Ticket = new global::Protocol.Ticket();
          }
          Ticket.MergeFrom(other.Ticket);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protocol.FlightCompanyRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Protocol.User subBuilder = new global::Protocol.User();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Protocol.Flight subBuilder = new global::Protocol.Flight();
            if (payloadCase_ == PayloadOneofCase.Flight) {
              subBuilder.MergeFrom(Flight);
            }
            input.ReadMessage(subBuilder);
            Flight = subBuilder;
            break;
          }
          case 34: {
            global::Protocol.Ticket subBuilder = new global::Protocol.Ticket();
            if (payloadCase_ == PayloadOneofCase.Ticket) {
              subBuilder.MergeFrom(Ticket);
            }
            input.ReadMessage(subBuilder);
            Ticket = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Protocol.FlightCompanyRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Protocol.User subBuilder = new global::Protocol.User();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Protocol.Flight subBuilder = new global::Protocol.Flight();
            if (payloadCase_ == PayloadOneofCase.Flight) {
              subBuilder.MergeFrom(Flight);
            }
            input.ReadMessage(subBuilder);
            Flight = subBuilder;
            break;
          }
          case 34: {
            global::Protocol.Ticket subBuilder = new global::Protocol.Ticket();
            if (payloadCase_ == PayloadOneofCase.Ticket) {
              subBuilder.MergeFrom(Ticket);
            }
            input.ReadMessage(subBuilder);
            Ticket = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FlightCompanyRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("LOGGED_IN")] LoggedIn = 1,
        [pbr::OriginalName("LOGGED_OUT")] LoggedOut = 2,
        [pbr::OriginalName("SEARCH")] Search = 3,
        [pbr::OriginalName("BUY")] Buy = 4,
      }

    }
    #endregion

  }

  public sealed partial class FlightCompanyResponse : pb::IMessage<FlightCompanyResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlightCompanyResponse> _parser = new pb::MessageParser<FlightCompanyResponse>(() => new FlightCompanyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlightCompanyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.FlightCompanyProtocolv3Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightCompanyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightCompanyResponse(FlightCompanyResponse other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          User = other.User.Clone();
          break;
        case PayloadOneofCase.Flight:
          Flight = other.Flight.Clone();
          break;
        case PayloadOneofCase.Ticket:
          Ticket = other.Ticket.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightCompanyResponse Clone() {
      return new FlightCompanyResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.FlightCompanyResponse.Types.Type type_ = global::Protocol.FlightCompanyResponse.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.FlightCompanyResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.User User {
      get { return payloadCase_ == PayloadOneofCase.User ? (global::Protocol.User) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
      }
    }

    /// <summary>Field number for the "flight" field.</summary>
    public const int FlightFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Flight Flight {
      get { return payloadCase_ == PayloadOneofCase.Flight ? (global::Protocol.Flight) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Flight;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Ticket Ticket {
      get { return payloadCase_ == PayloadOneofCase.Ticket ? (global::Protocol.Ticket) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Ticket;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      User = 2,
      Flight = 3,
      Ticket = 4,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlightCompanyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlightCompanyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Flight, other.Flight)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Protocol.FlightCompanyResponse.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Flight) hash ^= Flight.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Ticket) hash ^= Ticket.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Protocol.FlightCompanyResponse.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Flight) {
        output.WriteRawTag(26);
        output.WriteMessage(Flight);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        output.WriteRawTag(34);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Protocol.FlightCompanyResponse.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (payloadCase_ == PayloadOneofCase.Flight) {
        output.WriteRawTag(26);
        output.WriteMessage(Flight);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        output.WriteRawTag(34);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Protocol.FlightCompanyResponse.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.User) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (payloadCase_ == PayloadOneofCase.Flight) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flight);
      }
      if (payloadCase_ == PayloadOneofCase.Ticket) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlightCompanyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Protocol.FlightCompanyResponse.Types.Type.Unknown) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.User:
          if (User == null) {
            User = new global::Protocol.User();
          }
          User.MergeFrom(other.User);
          break;
        case PayloadOneofCase.Flight:
          if (Flight == null) {
            Flight = new global::Protocol.Flight();
          }
          Flight.MergeFrom(other.Flight);
          break;
        case PayloadOneofCase.Ticket:
          if (Ticket == null) {
            Ticket = new global::Protocol.Ticket();
          }
          Ticket.MergeFrom(other.Ticket);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protocol.FlightCompanyResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Protocol.User subBuilder = new global::Protocol.User();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Protocol.Flight subBuilder = new global::Protocol.Flight();
            if (payloadCase_ == PayloadOneofCase.Flight) {
              subBuilder.MergeFrom(Flight);
            }
            input.ReadMessage(subBuilder);
            Flight = subBuilder;
            break;
          }
          case 34: {
            global::Protocol.Ticket subBuilder = new global::Protocol.Ticket();
            if (payloadCase_ == PayloadOneofCase.Ticket) {
              subBuilder.MergeFrom(Ticket);
            }
            input.ReadMessage(subBuilder);
            Ticket = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Protocol.FlightCompanyResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Protocol.User subBuilder = new global::Protocol.User();
            if (payloadCase_ == PayloadOneofCase.User) {
              subBuilder.MergeFrom(User);
            }
            input.ReadMessage(subBuilder);
            User = subBuilder;
            break;
          }
          case 26: {
            global::Protocol.Flight subBuilder = new global::Protocol.Flight();
            if (payloadCase_ == PayloadOneofCase.Flight) {
              subBuilder.MergeFrom(Flight);
            }
            input.ReadMessage(subBuilder);
            Flight = subBuilder;
            break;
          }
          case 34: {
            global::Protocol.Ticket subBuilder = new global::Protocol.Ticket();
            if (payloadCase_ == PayloadOneofCase.Ticket) {
              subBuilder.MergeFrom(Ticket);
            }
            input.ReadMessage(subBuilder);
            Ticket = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FlightCompanyResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("OK")] Ok = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("LOGIN")] Login = 3,
        [pbr::OriginalName("LOGOUT")] Logout = 4,
        [pbr::OriginalName("SEARCH")] Search = 5,
        [pbr::OriginalName("BUY")] Buy = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
